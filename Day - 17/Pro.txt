#include <stdio.h>
#include <stdlib.h> //for exit()
#include <unistd.h> //for sleep()

int main()
{
	printf("Program started.\n");
	
	printf("Sleeping for 3 seconds...\n");
	sleep(3); //pause for 3 seconds
	
	printf("Exiting the program.\n");
	exit(0); //clean exit
	
	return 0;
}

//vi exit.c


-----------------------------------------------------------

#include <stdio.h>
#include <stdlib.h> //for exit()
#include <unistd.h> //for fork(), sleep()
#include <sys/wait.h> //for wait()

int main()
{
  pid_t pid;
  
  printf("Parent process started. PID: %d\n", getpid());
  
  pid = fork();
  
  if(pid<0)
  {
    perror("fork failed");
	exit(1);
  }
  
  if(pid==0)
  {
	  //child process
	  printf("Child process. PID: %d, sleeping for 2 seconds...\n",getpid());
	  sleep(2);
	  
	  printf("Child process exiting.\n");
	  exit(0); //child exits with status 0
  }
  
  else
  {
	  //Parent process
	  int status;
	  printf("Parent waiting for child to finish...\n");
	  wait(&status); // wait for child to finish
	  if(WIFEXITED(status))
	  {
		  //WIFEXITED(status) returns true if child terminated normally
		  printf("Child exited with status: %d\n", WEXITSTATUS(status));
		  
	  }
	  else
	  {
		  printf("Child did not exit normally.\n");
	  }
	  printf("Parent process ending.\n");
  }
  
  return 0;
}

//vi exit2.c


---------------------------------------------------------------------------------

Exercise 01:

First child: Slept for 1 second.
Second child: Slept for 3 seconds.
Parent: Both children have finished.

#include <stdio.h>
#include <stdlib.h> //for exit()
#include <unistd.h> //for fork(), sleep()
#include <sys/wait.h>

int main()
{
	
  pid_t pid1, pid2;
  
  printf("Parent process started. PID: %d\n", getpid());
  
  // Create first child
    pid1 = fork();
    if (pid1 < 0) 
	{
        perror("fork failed");
        exit(1);
    } 
	
	else if (pid1 == 0) 
	{
        printf("First child process. PID: %d, sleeping for 1 second...\n", getpid());
        sleep(1);
        printf("First child process exiting.\n");
        exit(0);
    }

    // Create second child
    pid2 = fork();
    if (pid2 < 0) 
	{
        perror("fork failed");
        exit(1);
    } 
	
	else if (pid2 == 0) 
	{
        printf("Second child process. PID: %d, sleeping for 3 seconds...\n", getpid());
        sleep(3);
        printf("Second child process exiting.\n");
        exit(0);
    }

    // Parent process waits for both children
    printf("Parent waiting for both children to finish...\n");
    wait(NULL); // Wait for first child
    wait(NULL); // Wait for second child

    printf("Both children have finished.\n");
    printf("Parent process ending.\n");

    return 0;
}

//vi exit3.c

--------------------------------------------------------------------------------------------

Exercise 02;

First child: sleeps for 2 seconds, exits with status 2.
Second child: sleeps for 1 second, exits with status 1.
Parent :waits twice, and prints which child (by PID or exit code)finished first and second.


#include <stdio.h>
#include <stdlib.h>  // for exit()
#include <unistd.h>  // for fork(), sleep()
#include <sys/wait.h> // for wait()

int main() {
    pid_t pid1, pid2;
    int status1, status2;

    printf("Parent process started. PID: %d\n", getpid());

    // Create first child
    pid1 = fork();
    if (pid1 < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid1 == 0) {
        printf("First child process. PID: %d, sleeping for 2 seconds...\n", getpid());
        sleep(2);
        printf("First child process exiting with status 2.\n");
        exit(2);
    }

    // Create second child
    pid2 = fork();
    if (pid2 < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid2 == 0) {
        printf("Second child process. PID: %d, sleeping for 1 second...\n", getpid());
        sleep(1);
        printf("Second child process exiting with status 1.\n");
        exit(1);
    }

    // Parent process waits twice
    pid_t finished_pid = wait(&status1);
    printf("Child process with PID %d finished first with exit status: %d\n", finished_pid, WEXITSTATUS(status1));

    finished_pid = wait(&status2);
    printf("Child process with PID %d finished second with exit status: %d\n", finished_pid, WEXITSTATUS(status2));

    printf("Parent process ending.\n");

    return 0;
}

//vi exit4.c

------------------------------------------------------------------------------------------

Exercise 03;

The parent creates a child process.
The child creates a grandchild process.
The grandchild sleeps 2 seconds and exits with status 2.
The child waits for the grandchild, prints its exit status, then exits with status 55.


#include <stdio.h>
#include <stdlib.h>  // for exit()
#include <unistd.h>  // for fork(), sleep()
#include <sys/wait.h> // for wait()

int main() {
    pid_t child_pid, grandchild_pid;
    int status;

    printf("Parent process started. PID: %d\n", getpid());

    // Create child process
    child_pid = fork();
    if (child_pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (child_pid == 0) {
        // Child process
        printf("Child process started. PID: %d\n", getpid());

        // Create grandchild process
        grandchild_pid = fork();
        if (grandchild_pid < 0) {
            perror("Fork failed");
            exit(1);
        } else if (grandchild_pid == 0) {
            // Grandchild process
            printf("Grandchild process started. PID: %d, sleeping for 2 seconds...\n", getpid());
            sleep(2);
            printf("Grandchild exiting with status 2.\n");
            exit(2);
        }

        // Child waits for grandchild to finish
        wait(&status);
        printf("Child process: Grandchild exited with status: %d\n", WEXITSTATUS(status));

        // Child exits with status 55
        printf("Child process exiting with status 55.\n");
        exit(55);
    }

    // Parent waits for child to finish
    wait(&status);
    printf("Parent process: Child exited with status: %d\n", WEXITSTATUS(status));
    printf("Parent process ending.\n");

    return 0;
}

//vi exit5.c

